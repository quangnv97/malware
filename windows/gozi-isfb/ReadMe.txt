ISFB - a bot program designed to analyze and modify HTTP traffic on the client computer.

Supports all 32x and 64x bit Windows, starting with Windows XP.
Supports all 32x and 64x bit versions of Internet Explorer, starting with 6.0.
Supports all 32x and 64x bit versions of Mozilla Firefox.
Supports all 32-bit versions of Google Chrome.

The program is able to be installed and run without administrator privileges.
Handles all HTTP browser traffic, including encrypted HTTPS.

The bot is managed from a remote server, using configuration files and commands.
Configuration and command files are signed via RSA. Upon receipt of the files, the bot verifies the digital signature,
 and, in case of signature mismatch, the file is ignored.

At the first start, the bot initiates a timer. In the future, according to the timer, the bot accesses the control server for files.

2 methods of search of the managing server are supported:
- search of the set list of domain names and selection of the active one;
- generation of a dynamic list of domain names depending on the current date and system configuration;

Traffic analysis is performed on the basis of a specially formed configuration file, which the bot receives from the server.
Such a file can contain the following instructions:
- replacement of the HTML page as a whole
- replacement of a fragment of the HTML page
- copy a fragment of the page and send to the server
- find the file on the mask and fix it on the server
- make a screenshot and send it to the server

In addition to the configuration file, the bot receives from the command server:
GET_CERTS - export and send certificates installed in the Windows system storage.
For XP, it also downloads non-exported certificates.
GET_COOKIES - collect FF and IE cookies, SOL Flash files, package them with preservation of structure
directories and send to the server.
CLR_COOKIES - delete cookies FF and IE, SOL-Flash files.
GET_SYSINFO - collect system information: processor type, OS version, process list, list
drivers, list of installed programs.
KILL - kill the OS (works only with administrator rights)
REBOOT - reboot the OS
GROUP = n - change bot group ID to n
LOAD_EXE = URL - upload file from specified URL and run it
LOAD_REG_EXE = URL - download the file from the specified URL, register it in autirun and run
LOAD_UPDATE = URL - download the program update and run
GET_LOG - send internal log to server
GET_FILES = * - find all files corresponding to the given mask and send to the server
SLEEP = n - stop command queue processing for n milliseconds. (used for long operations)
SEND_ALL - send all data from the queue to send immediately. Otherwise, the data is corrected
by timer.
LOAD_DLL = URL [, URL] - load the specified DLL URL and inject it into the explorer.exe process.
the first URL for a 32-bit DLL, the second for a 64-bit DLL.

SOCKS_START = IP: PORT - start sox4 \ 5 server (if available)
SOCKS_STOP - stop sox4 \ 5 server

GET_KEYLOG - send keylogger data (if available)
GET_MAIL - activate the E-Mail grabber (if available) and send the data received from it
GET_FTP - activate FTP grabber (if available) and send the data received from it

SELF_DELETE - remove software from the system, including all files and registry keys

URL_BLOCK = URL - block access to all URLs that match the specified mask
URL_UNBLOCK = URL - unblock access to a URL that satisfies the specified mask previously blocked by the URL_BLOCK command
FORMS_ON - enable HTTP form grabber (if there is a _ALWAYS_HTTPS define, then HTTPs grabber remains enabled always)
FORMS_OFF - disable the HTTP form grabber
KEYLOG_ON [= list] - enable keylog for the specified list of processes
KEYLOG_OFF - disable keylog
LOAD_INI = URL - download the packed INI file from the specified URL, save it in the registry and use it instead of the INI file,
attached to the software by a builder. The INI file must be packaged and signed.

LOAD_REG_DLL = name, URL [, URL] - load the DLL at the specified URL, save it under the given name and register for
automatic boot after each system startup
UNREG_DLL = name - remove from automatic DLL loading with the given name

Technical details

Droper - installation program.
Droper is a Windows executable file (PE32). The file, in the form of a binary resource, contains
two packaged DLLs: a 32x bit and a 64x bit bot.
At startup, the dropper unpacks the DLLs and registers them for autorun.
DLLs are unpacked and registered in such a way that they can be executed at any privilege level:
 both at the administrator, and at the user.

DLL - bot.
The bot is a dynamically loaded library (DLL). Each architecture has its own corresponding DLL.
The DLL bot is loaded into all running processes.
The bot consists of 2 logical components: parser and server. The parser is activated in the context of the browser process.
The server is activated in the context of the shell process (as a rule exp
